#!/usr/bin/python
"""
This module will parse a set of output that has been generated by top in batch mode.
It expects to be fed the output corresponding to one iteration of top.
"""

import argparse
import os
import sys

from top_entry import TopEntry, Job

__author__ = 'Dave Pinkney'

class TopParser(object):

    def __init__(self, fileName):
        """
        """
        self.fileName = fileName
        self.entries = []

    def parse(self):
        LOG("Parsing file %s" % self.fileName)

        # Parse the file
        # Pass output sequence from top to TopParser
        with open(self.fileName, 'r') as f:
            topEntry = TopEntry().parse(f)
            self.entries.append(topEntry)
            
        LOG("Parsed {0} entries.".format(len(self.entries)))
            
    def parseEntry(self, f):
        """
        :type f - File of top output
        :return: a TopEntry instance
        """
        read_data = f.read()

def LOG(message):
    """ Print the given message """
    if verbose:
        print "LOG: %s" % message

def main(argv):
    examples = """
    Examples:
    # Here's an example of something.
        %prog -f outputFile
    """
    parser = argparse.ArgumentParser(description="""This tool is used to parse output from the top command""",
                                     epilog=examples, formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument("fileName", type=str, default=None, help="File to parse")
    parser.add_argument("-v", "--verbose", action='store_true', help="True to enable verbose logging mode")
    options = parser.parse_args(argv)

    global verbose
    verbose = options.verbose

    LOG("Got options: %s" % options)

    topParser = TopParser(options.fileName)
    topParser.parse()


if __name__ == "__main__":
    main(sys.argv[1:])
